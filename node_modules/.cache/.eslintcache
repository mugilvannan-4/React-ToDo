[{"D:\\ReactJS\\react-to-do\\src\\index.js":"1","D:\\ReactJS\\react-to-do\\src\\App.js":"2","D:\\ReactJS\\react-to-do\\src\\modal.js":"3","D:\\ReactJS\\react-to-do\\src\\view.js":"4","D:\\ReactJS\\react-to-do\\src\\completedview.js":"5","D:\\ReactJS\\GIT\\React-ToDo\\src\\index.js":"6","D:\\ReactJS\\GIT\\React-ToDo\\src\\App.js":"7","D:\\ReactJS\\GIT\\React-ToDo\\src\\modal.js":"8","D:\\ReactJS\\GIT\\React-ToDo\\src\\view.js":"9","D:\\ReactJS\\GIT\\React-ToDo\\src\\completedview.js":"10"},{"size":220,"mtime":1621002169465,"results":"11","hashOfConfig":"12"},{"size":11462,"mtime":1622119499615,"results":"13","hashOfConfig":"12"},{"size":2501,"mtime":1622016942389,"results":"14","hashOfConfig":"12"},{"size":1457,"mtime":1622020842720,"results":"15","hashOfConfig":"12"},{"size":1503,"mtime":1622116299255,"results":"16","hashOfConfig":"12"},{"size":220,"mtime":1621002169465,"results":"17","hashOfConfig":"18"},{"size":11557,"mtime":1622131302910,"results":"19","hashOfConfig":"18"},{"size":2501,"mtime":1622016942389,"results":"20","hashOfConfig":"18"},{"size":1457,"mtime":1622020842720,"results":"21","hashOfConfig":"18"},{"size":1503,"mtime":1622116299255,"results":"22","hashOfConfig":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"8ghp0t",{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"25"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"25"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ut6r1",{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},"D:\\ReactJS\\react-to-do\\src\\index.js",[],["48","49"],"D:\\ReactJS\\react-to-do\\src\\App.js",["50","51"],"D:\\ReactJS\\react-to-do\\src\\modal.js",["52"],"\r\nimport React, { Children } from \"react\";\r\nimport './modal.css';\r\nconst options =  [\"Inprogress\",\"Completed\"]\r\nfunction Modal(props) {\r\n\r\nfunction savehandle(e, k) {\r\n    e.preventDefault();\r\n    props.save(e, k);\r\n}\r\nfunction dsccschange(e, k) {\r\n    props.chrlg(e, k);\r\n}\r\nfunction closehandle(e, k) {\r\n    e.preventDefault();\r\n    props.closemod(k);\r\n}\r\n\r\nfunction cardstateChange(e, k) {\r\n    props.cardst(e.target.value, k);\r\n}\r\n\r\nreturn(\r\n    <form>\r\n       <div className=\"modeldata\">\r\n          <form>\r\n              <div className=\"taskname\">\r\n                <label>\r\n                    Name:\r\n                </label>\r\n                <div>{props.task}</div>\r\n              </div>\r\n              <div className=\"taskDesc\">\r\n                <label>\r\n                    Description:\r\n                </label>\r\n                <div>\r\n                <textarea\r\n                    rows={6}\r\n                    type=\"text\"\r\n                    maxLength=\"200\"\r\n                    value = {props.desc}\r\n                    onChange={(e) => dsccschange(e, props._key)}\r\n                />\r\n                <label>Characters left:</label>\r\n                <p>{props.lenght}</p>\r\n                </div>\r\n              </div>\r\n              <div className=\"taskstatus\">\r\n                <label>\r\n                     Status:    \r\n                </label>\r\n                 <select value={props.cpmstate} onChange={(e) => cardstateChange(e, props._key)}>\r\n                     {options.map((option) => (\r\n                     <option key={option} value={option}>\r\n                     {option}\r\n                    </option>\r\n                     ))}\r\n                 </select>\r\n              </div>\r\n              <div className=\"taskstart\">\r\n                 <label>\r\n                     Created on:\r\n                 </label>\r\n                 <div>{props.startdt}</div>\r\n              </div>   \r\n              <div className=\"taskend\">\r\n                 <label>\r\n                     Closed on:\r\n                 </label>\r\n                 <div>{props.enddt}</div>\r\n              </div>\r\n              <div className=\"savebutton\">  \r\n                  <button onClick={(e) => savehandle(e, props._key)}>save</button>\r\n              </div> \r\n              <div className=\"closebutton\">  \r\n                  <button  onClick={(e) => closehandle(e, props._key)}>close</button>\r\n              </div>              \r\n          </form>\r\n       </div>\r\n    </form>\r\n)\r\n}\r\n\r\n\r\nexport default Modal;","D:\\ReactJS\\react-to-do\\src\\view.js",["53"],"\r\nimport React, { Children } from \"react\";\r\nimport './view.css';\r\nfunction View(props) {\r\n\r\n\r\nfunction closehandle(e, k) {\r\n    e.preventDefault();\r\n    props.viewmod(k);\r\n}\r\n\r\nreturn(\r\n    <form>\r\n       <div className=\"viewdata\">\r\n          <form>\r\n              <div className=\"taskname\">\r\n                <label>\r\n                    Name:\r\n                </label>\r\n                <div>{props.vtask}</div>\r\n              </div>\r\n              <div className=\"taskDesc\">\r\n                <label>\r\n                    Description:\r\n                </label>\r\n                <p>{props.vdesc}</p>\r\n              </div>\r\n              <div className=\"taskstatus\">\r\n                <label>\r\n                     Status:    \r\n                </label>\r\n                <p>{props.vstatus}</p>\r\n               </div> \r\n              <div className=\"taskstart\">\r\n                 <label>\r\n                     Created on:\r\n                 </label>\r\n                 <div>{props.vstartdt}</div>\r\n              </div>   \r\n              <div className=\"taskend\">\r\n                 <label>\r\n                     Closed on:\r\n                 </label>\r\n                 <div>{props.venddt}</div>\r\n              </div>\r\n              <div className=\"vclosebutton\">  \r\n                  <button  onClick={(e) => closehandle(e, props._key)}>close</button>\r\n              </div>              \r\n          </form>\r\n       </div>\r\n    </form>\r\n)\r\n}\r\n\r\n\r\nexport default View;","D:\\ReactJS\\react-to-do\\src\\completedview.js",["54"],"D:\\ReactJS\\GIT\\React-ToDo\\src\\index.js",[],"D:\\ReactJS\\GIT\\React-ToDo\\src\\App.js",["55","56"],"import React, { useState, useRef, useEffect} from 'react';\nimport './App.css';\nimport Modal from \"./modal\"\nimport View from \"./view\"\nimport Completedview from \"./completedview\"\n\n\n\nfunction App() {\n  const wrapperRef = useRef(null);  \n  const [keycount, setKeycount] = useState(0);\n  const [name, setName] = useState([]);\n  const [ele, setEle] = useState('');\n  const [clickstate, setClickstate] = useState([]);\n  const [modelstate, setModelstate] = useState([]);\n  const [charele, setCharele] = useState('');\n  const [charleft, setCharleft] = useState([]);\n  const [currentdate, setCurrentdate] = useState('');\n  const [enddate, setEnddate] = useState([]);\n  const [cardstate, setCardstate] = useState([]);\n  const [descele, setDescele] = useState('');\n  const [descstate, setDescstate] = useState([]);\n  const [viewstate, setViewstate] = useState([]);\n  const [completname, setCompletname] = useState([]);\n  const [completclickstate, setCompletclickstate] = useState([]);\n  const [completviewstate, setCompletviewstate] = useState([]);\n  \n  useEffect(() => {\n    document.addEventListener(\"click\", handleClickOutside, false);\n    return () => {\n      document.removeEventListener(\"click\", handleClickOutside, false);\n    };\n  }, []);\n\n\n const handleClickOutside = event => {\n    if (wrapperRef.current && !wrapperRef.current.contains(event.target)) {\n      const rstst = [...clickstate]\n      rstst.push(false);\n      setClickstate(rstst);\n      const resetst = [...completclickstate]\n      resetst.push(false);\n      setCompletclickstate(resetst);\n    }\n  };\n  function keyChange(e) {\n    setEle(e.target.value);\n  }\n\n  function handleChange(event) {\n    event.preventDefault();\n    const namelist= [...name];\n    let input = { key: keycount, value: ele}\n    var current = new Date();\n    var isodate = current.toISOString();\n    const ctdate = [...currentdate];\n    ctdate[keycount] = isodate;\n    setCurrentdate(ctdate);\n    const ennddt = [...enddate];\n    ennddt.push(\"Yet to Close\");\n    setEnddate(ennddt);\n    setKeycount(keycount + 1);\n    namelist.push(input);\n    setName(namelist);\n    setEle('');\n    //const clkst= [...clickstate]\n    //clkst.push(false);\n    //setClickstate(clkst);\n    const modst= [...modelstate]\n    modst.push(false);\n    setModelstate(modst); \n    const vwst = [...viewstate]\n    vwst.push(false);\n    setViewstate(vwst);\n    const crdst = [...cardstate];\n    crdst[keycount] = \"Inprogress\"\n    setCardstate(crdst); \n\n }\n\n\nfunction handlemenu(key){\n  const newarr = [...clickstate]\n  newarr[key] = !newarr[key];\n  setClickstate(newarr);\n}\n\nfunction handledelete(key){\n  let names = [...name];\n  names = names.filter(el => el.key !== key);\n  setName(names); \n  const delarr = [...clickstate]\n  delarr[key] = !delarr[key];\n  setClickstate(delarr);\n}\n\nfunction showmodal(key) {\n  const modarr= [...modelstate]\n  modarr[key] = !modarr[key];\n  setModelstate(modarr);\n  const shmdarr = [...clickstate]\n  shmdarr[key] = !shmdarr[key];\n  setClickstate(shmdarr);\n  setCharleft(200);    \n  const cdst = [...cardstate];\n  cdst[key] = \"Inprogress\"\n  setCardstate(cdst); \n  const  descload = [...descstate];\n  setDescele(descload[key]);\n  if(descstate[key] === undefined) {\n\n    setCharele(200);\n  }else{\n    const rmglg = 200 - descstate[key].length;\n    setCharele(rmglg);\n  \n    setCharleft(rmglg);\n  }\n}\n\nfunction getcharlenght(e, k) {\n  const charcount = e.target.value.length;\n  const charlength = 200 - charcount;\n  setCharleft(charlength);\n  setDescele(e.target.value);\n}\n\nfunction closemodal(p) {\n  const clmod = [...modelstate];\n  clmod[p] = !clmod[p];\n  setModelstate(clmod);\n  const cdst = [...cardstate];\n  cdst[p] = \"Inprogress\"\n  setCardstate(cdst); \n  setDescele('');\n}\n\nfunction statecard(e, k) {\n  const cdst = [...cardstate];\n  cdst[k] = e;\n  setCardstate(cdst);\n\n}\n\nfunction savemodal(e, k) {\n if (cardstate[k] === \"Inprogress\"){\n  const  descstt = [...descstate];\n  descstt[k] = descele;\n  setDescstate(descstt);\n  const svmod = [...modelstate];\n  svmod[k] = !svmod[k];\n  setModelstate(svmod);\n } else {\n  const  descste = [...descstate];\n  descste[k] = descele;\n  setDescstate(descste);\n   const cmpnm = [ ...completname];\n   const mvnm = [...name]\n   var result = mvnm.find( ({ key }) => key === k);\n   let inpcom = { key: k, value: result.value}\n   cmpnm.push(inpcom);\n   setCompletname(cmpnm);\n   let nmsbm = [...name];\n   nmsbm = nmsbm.filter(el => el.key !== k);\n   setName(nmsbm);\n   var current = new Date();\n   var isodates = current.toISOString();\n   const cmenddate = [...enddate];\n   cmenddate[k] = isodates;\n   setEnddate(cmenddate);\n   const svmod = [...modelstate];\n   svmod[k] = !svmod[k];\n   setModelstate(svmod);\n   const cmpvwst = [...completviewstate]\n   cmpvwst.push(false);\n   setCompletviewstate(cmpvwst);\n }\n}\n\nfunction viewmodal(k) {\n  const viewarr= [...viewstate]\n  viewarr[k] = !viewarr[k];\n  setViewstate(viewarr);\n  const vdarr = [...clickstate]\n  vdarr[k] = !vdarr[k];\n  setClickstate(vdarr);\n}\n\nfunction closeview(p) {\n  const clvw = [...viewstate];\n  clvw[p] = !clvw[p];\n  setViewstate(clvw);\n}\n\nfunction handlecomplettmenu(k) {\n  const cmclk = [...completclickstate]\n  cmclk[k] = !cmclk[k];\n  setCompletclickstate(cmclk);\n}\n\nfunction viewcmpmodal(k) {\n  const cviewarr= [...completviewstate]\n  cviewarr[k] = !cviewarr[k];\n  setCompletviewstate(cviewarr);\n  const cvdarr = [...completclickstate]\n  cvdarr[k] = !cvdarr[k];\n  setCompletclickstate(cvdarr);\n}\n\nfunction closecmplview(k) {\n  const cvwarr= [...completviewstate]\n  cvwarr[k] = !cvwarr[k];\n  setCompletviewstate(cvwarr);\n}\n\nfunction completdelete(k){\n  let cmpnames = [...completname];\n  cmpnames = cmpnames.filter(el => el.key !== k);\n  setCompletname(cmpnames); \n  const cmpdelarr = [...completclickstate]\n  cmpdelarr[k] = !cmpdelarr[k];\n  setCompletclickstate(cmpdelarr);\n}\n  return (\n    <div className=\"Tasklist\" ref={wrapperRef}>\n       <form>\n                <div className=\"header\" >\n                    <h3>ToDo list</h3>\n                    <input type=\"text\"\n                           placeholder=\"Your Tasks\"\n                           value={ele}\n                           onChange={keyChange}\n                           />\n                     <button type=\"submit\" onClick={handleChange}>Add</button>\n                 </div> \n                 <h6 className=\"heading_pending\">InProgress:</h6>\n                 <form className=\"Pendingform\">\n                 <div className=\"body\">\n                      {\n                          name.slice(0).reverse().map((_el, i) => {\n                            return <div>\n                                    <ul className=\"card_pending\">\n                                      <div>{_el.value}</div>\n                                      <button type=\"button\" className=\"button\" onClick={() => handlemenu(_el.key)}>\n                                      ☰\n                                      </button>\n                                    </ul>\n                                     {clickstate[_el.key] === true && modelstate[_el.key] === false &&\n                                      <div className=\"dropdown\">\n                                        <ul>\n                                        <li onClick={() => viewmodal(_el.key)}>View</li>\n                                          <li onClick={() => showmodal(_el.key)}>Edit</li>\n                                          <li onClick={() => handledelete(_el.key)}>Delete</li>\n                                        </ul>\n                                      </div>\n                                      }\n                                      {modelstate[_el.key] === true &&\n                                      <Modal className=\"modpop\" \n                                             task={_el.value} \n                                             chrlg={getcharlenght} \n                                             lenght={charleft} \n                                             startdt={currentdate[_el.key]} \n                                             enddt={enddate[_el.key]} \n                                             _key={_el.key} \n                                             closemod={closemodal} \n                                             cardst={statecard} \n                                             cpmstate={cardstate[_el.key]} \n                                             desc={descele} \n                                             save={savemodal}/>\n                                      }\n                                      {viewstate[_el.key] === true &&\n                                      <View className=\"viewpop\" \n                 \n                                      vtask={_el.value} \n                                             _key={_el.key} \n                                             vstartdt={currentdate[_el.key]}  \n\t\t\t\t\t\t\t\t\t\t\t                       venddt={enddate[_el.key]} \n                                             vstatus={cardstate[_el.key]} \n                                             vdesc={descstate[_el.key]} \n\t\t\t\t\t\t\t\t\t\t\t                       viewmod={closeview}/>\n                                        }\n                                      \n                                      </div>\n                          })\n                        }\n                 </div>\n                </form>\n                  <h6 className=\"heading_Completed\">Completed:</h6>\n                    <form className=\"Completedform\">\n                      <div className=\"body\">\n                      {\n                          completname.slice(0).reverse().map((_elem, i) => {\n                            return <div>\n                                    <ul className=\"card_Complete\">\n                                      <div>{_elem.value}</div>\n                                      <button type=\"button\" className=\"Completebutton\" onClick={() => handlecomplettmenu(_elem.key)}>\n                                      ☰\n                                      </button>  \n                                    </ul>\n                                    {completclickstate[_elem.key] === true &&   \n                                    <div className=\"completdropdown\">                            \n                                        <ul>\n                                          <li onClick={() => viewcmpmodal(_elem.key)}>View</li>\n                                          <li onClick={() => completdelete(_elem.key)}>Delete</li>\n                                        </ul>\n                                      </div>\n                                      }\n                                      {completviewstate[_elem.key] === true &&\n                                          <Completedview className=\"completpop\" \n                                                cvtask={_elem.value} \n                                                _key={_elem.key} \n                                                cvstartdt={currentdate[_elem.key]}  \n\t                                              cvenddt={enddate[_elem.key]} \n                                                cvstatus={cardstate[_elem.key]} \n                                                cvdesc={descstate[_elem.key]} \n                                                cmplviewmod={closecmplview}/>\n                                       }\n                                    </div>\n                            })\n                          }  \n                      </div>\n                    </form>\n        </form>\n      \n\n    </div>\n    \n\n  );\n  \n  \n  \n}\n\n\n\n\n\nexport default App;\n","D:\\ReactJS\\GIT\\React-ToDo\\src\\modal.js",["57"],"D:\\ReactJS\\GIT\\React-ToDo\\src\\view.js",["58"],"D:\\ReactJS\\GIT\\React-ToDo\\src\\completedview.js",["59"],"\r\nimport React, { Children } from \"react\";\r\nimport './completedview.css';\r\nfunction Completedview(props) {\r\n\r\n\r\nfunction closehandle(e, k) {\r\n    e.preventDefault();\r\n    props.cmplviewmod(k);\r\n}\r\n\r\nreturn(\r\n    <form>\r\n       <div className=\"completedviewdata\">\r\n          <form>\r\n              <div className=\"taskname\">\r\n                <label>\r\n                    Name:\r\n                </label>\r\n                <div>{props.cvtask}</div>\r\n              </div>\r\n              <div className=\"taskDesc\">\r\n                <label>\r\n                    Description:\r\n                </label>\r\n                <p>{props.cvdesc}</p>\r\n              </div>\r\n              <div className=\"taskstatus\">\r\n                <label>\r\n                     Status:    \r\n                </label>\r\n                <p>{props.cvstatus}</p>\r\n               </div> \r\n              <div className=\"taskstart\">\r\n                 <label>\r\n                     Created on:\r\n                 </label>\r\n                 <div>{props.cvstartdt}</div>\r\n              </div>   \r\n              <div className=\"taskend\">\r\n                 <label>\r\n                     Closed on:\r\n                 </label>\r\n                 <div>{props.cvenddt}</div>\r\n              </div>\r\n              <div className=\"cvclosebutton\">  \r\n                  <button  onClick={(e) => closehandle(e, props._key)}>close</button>\r\n              </div>              \r\n          </form>\r\n       </div>\r\n    </form>\r\n)\r\n}\r\n\r\n\r\nexport default Completedview;",{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":16,"column":10,"nodeType":"66","messageId":"67","endLine":16,"endColumn":17},{"ruleId":"68","severity":1,"message":"69","line":33,"column":6,"nodeType":"70","endLine":33,"endColumn":8,"suggestions":"71"},{"ruleId":"64","severity":1,"message":"72","line":2,"column":17,"nodeType":"66","messageId":"67","endLine":2,"endColumn":25},{"ruleId":"64","severity":1,"message":"72","line":2,"column":17,"nodeType":"66","messageId":"67","endLine":2,"endColumn":25},{"ruleId":"64","severity":1,"message":"72","line":2,"column":17,"nodeType":"66","messageId":"67","endLine":2,"endColumn":25},{"ruleId":"64","severity":1,"message":"65","line":16,"column":10,"nodeType":"66","messageId":"67","endLine":16,"endColumn":17},{"ruleId":"68","severity":1,"message":"69","line":33,"column":6,"nodeType":"70","endLine":33,"endColumn":8,"suggestions":"73"},{"ruleId":"64","severity":1,"message":"72","line":2,"column":17,"nodeType":"66","messageId":"67","endLine":2,"endColumn":25},{"ruleId":"64","severity":1,"message":"72","line":2,"column":17,"nodeType":"66","messageId":"67","endLine":2,"endColumn":25},{"ruleId":"64","severity":1,"message":"72","line":2,"column":17,"nodeType":"66","messageId":"67","endLine":2,"endColumn":25},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"no-unused-vars","'charele' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleClickOutside'. Either include it or remove the dependency array.","ArrayExpression",["76"],"'Children' is defined but never used.",["77"],"no-global-assign","no-unsafe-negation",{"desc":"78","fix":"79"},{"desc":"78","fix":"80"},"Update the dependencies array to be: [handleClickOutside]",{"range":"81","text":"82"},{"range":"83","text":"82"},[1230,1232],"[handleClickOutside]",[1230,1232]]